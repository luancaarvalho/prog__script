export class SandboxBuilder {
    constructor(_type, _config = {}) {
        this._type = _type;
        this._config = _config;
        this._scenarios = [];
        this._scenarioCounter = 0;
    }
    add(description, config) {
        let key = ++this._scenarioCounter;
        this._scenarios.push(Object.assign({}, config, { key }));
        return this;
    }
    serialize(sandboxPath) {
        return {
            key: sandboxPath,
            type: this._type,
            scenarios: this._scenarios,
            imports: this._config.imports || [],
            declarations: this._config.declarations || [],
            entryComponents: this._config.entryComponents || [],
            providers: this._config.providers || [],
            schemas: this._config.schemas || [],
            declareComponent: this._config.declareComponent !== undefined ? this._config.declareComponent : true,
        };
    }
}
export function sandboxOf(type, config) {
    return new SandboxBuilder(type, config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wbGF5Z3JvdW5kLyIsInNvdXJjZXMiOlsibGliL2xpYi9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0JBLE1BQU0sT0FBTyxjQUFjO0lBSXZCLFlBQ1ksS0FBVSxFQUNWLFVBQTJCLEVBQUU7UUFEN0IsVUFBSyxHQUFMLEtBQUssQ0FBSztRQUNWLFlBQU8sR0FBUCxPQUFPLENBQXNCO1FBTGpDLGVBQVUsR0FBVSxFQUFFLENBQUM7UUFDdkIscUJBQWdCLEdBQUcsQ0FBQyxDQUFDO0lBSzFCLENBQUM7SUFFSixHQUFHLENBQUMsV0FBbUIsRUFBRSxNQUFzQjtRQUMzQyxJQUFJLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUNsQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFNBQVMsQ0FBQyxXQUFtQjtRQUN6QixPQUFPO1lBQ0gsR0FBRyxFQUFFLFdBQVc7WUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2hCLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMxQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRTtZQUNuQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksRUFBRTtZQUM3QyxlQUFlLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRTtZQUN2QyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRTtZQUNuQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2RyxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFTLEVBQUUsTUFBd0I7SUFDekQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNhbmRib3ggfSBmcm9tICcuL2FwcC1zdGF0ZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FuZGJveE9mQ29uZmlnIHtcbiAgICB1bmlxdWVJZD86IHN0cmluZztcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBpbXBvcnRzPzogYW55W107XG4gICAgZGVjbGFyYXRpb25zPzogYW55W107XG4gICAgZW50cnlDb21wb25lbnRzPzogYW55W107XG4gICAgcHJvdmlkZXJzPzogYW55W107XG4gICAgc2NoZW1hcz86IGFueVtdO1xuICAgIGRlY2xhcmVDb21wb25lbnQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjZW5hcmlvQ29uZmlnIHtcbiAgICB0ZW1wbGF0ZTogc3RyaW5nO1xuICAgIHN0eWxlcz86IHN0cmluZ1tdO1xuICAgIGNvbnRleHQ/OiBhbnk7XG4gICAgcHJvdmlkZXJzPzogYW55W107XG59XG5cbmV4cG9ydCBjbGFzcyBTYW5kYm94QnVpbGRlciB7XG4gICAgcHJpdmF0ZSBfc2NlbmFyaW9zOiBhbnlbXSA9IFtdO1xuICAgIHByaXZhdGUgX3NjZW5hcmlvQ291bnRlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBfdHlwZTogYW55LFxuICAgICAgICBwcml2YXRlIF9jb25maWc6IFNhbmRib3hPZkNvbmZpZyA9IHt9LFxuICAgICkge31cblxuICAgIGFkZChkZXNjcmlwdGlvbjogc3RyaW5nLCBjb25maWc6IFNjZW5hcmlvQ29uZmlnKSB7XG4gICAgICAgIGxldCBrZXkgPSArK3RoaXMuX3NjZW5hcmlvQ291bnRlcjtcbiAgICAgICAgdGhpcy5fc2NlbmFyaW9zLnB1c2goT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLCB7IGtleSB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNlcmlhbGl6ZShzYW5kYm94UGF0aDogc3RyaW5nKTogU2FuZGJveCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHNhbmRib3hQYXRoLFxuICAgICAgICAgICAgdHlwZTogdGhpcy5fdHlwZSxcbiAgICAgICAgICAgIHNjZW5hcmlvczogdGhpcy5fc2NlbmFyaW9zLFxuICAgICAgICAgICAgaW1wb3J0czogdGhpcy5fY29uZmlnLmltcG9ydHMgfHwgW10sXG4gICAgICAgICAgICBkZWNsYXJhdGlvbnM6IHRoaXMuX2NvbmZpZy5kZWNsYXJhdGlvbnMgfHwgW10sXG4gICAgICAgICAgICBlbnRyeUNvbXBvbmVudHM6IHRoaXMuX2NvbmZpZy5lbnRyeUNvbXBvbmVudHMgfHwgW10sXG4gICAgICAgICAgICBwcm92aWRlcnM6IHRoaXMuX2NvbmZpZy5wcm92aWRlcnMgfHwgW10sXG4gICAgICAgICAgICBzY2hlbWFzOiB0aGlzLl9jb25maWcuc2NoZW1hcyB8fCBbXSxcbiAgICAgICAgICAgIGRlY2xhcmVDb21wb25lbnQ6IHRoaXMuX2NvbmZpZy5kZWNsYXJlQ29tcG9uZW50ICE9PSB1bmRlZmluZWQgPyB0aGlzLl9jb25maWcuZGVjbGFyZUNvbXBvbmVudCA6IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuZGJveE9mKHR5cGU6IGFueSwgY29uZmlnPzogU2FuZGJveE9mQ29uZmlnKTogU2FuZGJveEJ1aWxkZXIge1xuICAgIHJldHVybiBuZXcgU2FuZGJveEJ1aWxkZXIodHlwZSwgY29uZmlnKTtcbn1cbiJdfQ==