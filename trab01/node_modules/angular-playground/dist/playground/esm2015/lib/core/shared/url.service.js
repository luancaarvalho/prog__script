import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Location } from '@angular/common';
import { SandboxLoader } from './sandbox-loader';
let UrlService = class UrlService {
    constructor(location) {
        this.location = location;
        this._embed = null;
        this._select = null;
        this.sandboxMenuItems = SandboxLoader.getSandboxMenuItems();
        const urlPath = location.path();
        this._embed = /[?|&]embed=1/.exec(urlPath) !== null;
        this._select = this.parse('scenario', this.sandboxMenuItems, urlPath);
        if (this._select) {
            if (this._select.sandboxKey === null && this._select.scenarioKey === null) {
                this.location.replaceState('');
                return;
            }
        }
    }
    get embed() {
        return this._embed;
    }
    get select() {
        return this._select;
    }
    setSelected(sandboxKey, scenarioKey) {
        if (sandboxKey === null && scenarioKey === null) {
            this.location.replaceState('');
            return;
        }
        const sandBoxMenuItem = this.sandboxMenuItems
            .find(sandboxMenuItem => sandboxMenuItem.key.toLowerCase() === sandboxKey.toLowerCase());
        const scenarioMenuItem = sandBoxMenuItem.scenarioMenuItems.find(mi => mi.key === scenarioKey);
        const key = sandBoxMenuItem.uniqueId ? sandBoxMenuItem.uniqueId : sandboxKey;
        this.location.replaceState(`?scenario=${encodeURIComponent(key)}/${encodeURIComponent(scenarioMenuItem.description)}`);
    }
    parse(key, sandboxMenuItems, urlPath) {
        const match = new RegExp('[?|&]' + key + '=([^&#]*)').exec(urlPath);
        if (match !== null) {
            const value = decodeURIComponent(match[1]);
            const lastSlash = value.lastIndexOf('/');
            const sbKey = value.substr(0, lastSlash);
            let sandboxKey = sbKey;
            const sandboxMenuItem = sandboxMenuItems
                .find(smi => smi.key.toLowerCase() === sandboxKey.toLowerCase()
                || (smi.uniqueId && smi.uniqueId === sandboxKey));
            sandboxKey = sandboxMenuItem.key;
            if (!sandboxMenuItem) {
                return { sandboxKey: null, scenarioKey: null };
            }
            const scenarioDesc = value.substr(lastSlash + 1, value.length).toLowerCase();
            const scenarioKey = sandboxMenuItem.scenarioMenuItems
                .findIndex(scenarioMenuItem => scenarioMenuItem.description.toLowerCase() === scenarioDesc) + 1;
            if (scenarioKey <= 0) {
                return { sandboxKey: null, scenarioKey: null };
            }
            return { sandboxKey, scenarioKey };
        }
    }
};
UrlService.ctorParameters = () => [
    { type: Location }
];
UrlService = __decorate([
    Injectable()
], UrlService);
export { UrlService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXBsYXlncm91bmQvIiwic291cmNlcyI6WyJsaWIvY29yZS9zaGFyZWQvdXJsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRCxJQUFhLFVBQVUsR0FBdkIsTUFBYSxVQUFVO0lBY25CLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFiOUIsV0FBTSxHQUFZLElBQUksQ0FBQztRQUN2QixZQUFPLEdBQVEsSUFBSSxDQUFDO1FBYXhCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUM1RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQztRQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsS0FBSyxJQUFJLEVBQUU7Z0JBQ3ZFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQixPQUFPO2FBQ1Y7U0FDSjtJQUNMLENBQUM7SUFuQkQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJ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O0NBQ0osQ0FBQTs7WUFsRGlDLFFBQVE7O0FBZDdCLFVBQVU7SUFEdEIsVUFBVSxFQUFFO0dBQ0EsVUFBVSxDQWdFdEI7U0FoRVksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFNhbmRib3hNZW51SXRlbSB9IGZyb20gJy4uLy4uL2xpYi9hcHAtc3RhdGUnO1xuaW1wb3J0IHsgU2FuZGJveExvYWRlciB9IGZyb20gJy4vc2FuZGJveC1sb2FkZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXJsU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfZW1iZWQ6IGJvb2xlYW4gPSBudWxsO1xuICAgIHByaXZhdGUgX3NlbGVjdDogYW55ID0gbnVsbDtcblxuICAgIHNhbmRib3hNZW51SXRlbXM6IFNhbmRib3hNZW51SXRlbVtdO1xuXG4gICAgZ2V0IGVtYmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW1iZWQ7XG4gICAgfVxuXG4gICAgZ2V0IHNlbGVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdDtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbikge1xuICAgICAgICB0aGlzLnNhbmRib3hNZW51SXRlbXMgPSBTYW5kYm94TG9hZGVyLmdldFNhbmRib3hNZW51SXRlbXMoKTtcbiAgICAgICAgY29uc3QgdXJsUGF0aCA9IGxvY2F0aW9uLnBhdGgoKTtcbiAgICAgICAgdGhpcy5fZW1iZWQgPSAvWz98Jl1lbWJlZD0xLy5leGVjKHVybFBhdGgpICE9PSBudWxsO1xuICAgICAgICB0aGlzLl9zZWxlY3QgPSB0aGlzLnBhcnNlKCdzY2VuYXJpbycsIHRoaXMuc2FuZGJveE1lbnVJdGVtcywgdXJsUGF0aCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWxlY3QpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWxlY3Quc2FuZGJveEtleSA9PT0gbnVsbCAmJiB0aGlzLl9zZWxlY3Quc2NlbmFyaW9LZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2F0aW9uLnJlcGxhY2VTdGF0ZSgnJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0U2VsZWN0ZWQoc2FuZGJveEtleTogc3RyaW5nLCBzY2VuYXJpb0tleTogbnVtYmVyKSB7XG4gICAgICAgIGlmIChzYW5kYm94S2V5ID09PSBudWxsICYmIHNjZW5hcmlvS2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uLnJlcGxhY2VTdGF0ZSgnJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2FuZEJveE1lbnVJdGVtID0gdGhpcy5zYW5kYm94TWVudUl0ZW1zXG4gICAgICAgICAgICAuZmluZChzYW5kYm94TWVudUl0ZW0gPT4gc2FuZGJveE1lbnVJdGVtLmtleS50b0xvd2VyQ2FzZSgpID09PSBzYW5kYm94S2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICBjb25zdCBzY2VuYXJpb01lbnVJdGVtID0gc2FuZEJveE1lbnVJdGVtLnNjZW5hcmlvTWVudUl0ZW1zLmZpbmQobWkgPT4gbWkua2V5ID09PSBzY2VuYXJpb0tleSk7XG4gICAgICAgIGNvbnN0IGtleSA9IHNhbmRCb3hNZW51SXRlbS51bmlxdWVJZCA/IHNhbmRCb3hNZW51SXRlbS51bmlxdWVJZCA6IHNhbmRib3hLZXk7XG4gICAgICAgIHRoaXMubG9jYXRpb24ucmVwbGFjZVN0YXRlKGA/c2NlbmFyaW89JHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX0vJHtlbmNvZGVVUklDb21wb25lbnQoc2NlbmFyaW9NZW51SXRlbS5kZXNjcmlwdGlvbil9YCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZShrZXk6IHN0cmluZywgc2FuZGJveE1lbnVJdGVtczogU2FuZGJveE1lbnVJdGVtW10sIHVybFBhdGg6IHN0cmluZykge1xuICAgICAgICBjb25zdCBtYXRjaCA9IG5ldyBSZWdFeHAoJ1s/fCZdJyArIGtleSArICc9KFteJiNdKiknKS5leGVjKHVybFBhdGgpO1xuICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RTbGFzaCA9IHZhbHVlLmxhc3RJbmRleE9mKCcvJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNiS2V5ID0gdmFsdWUuc3Vic3RyKDAsIGxhc3RTbGFzaCk7XG4gICAgICAgICAgICBsZXQgc2FuZGJveEtleSA9IHNiS2V5O1xuICAgICAgICAgICAgY29uc3Qgc2FuZGJveE1lbnVJdGVtID0gc2FuZGJveE1lbnVJdGVtc1xuICAgICAgICAgICAgICAgIC5maW5kKHNtaSA9PiBzbWkua2V5LnRvTG93ZXJDYXNlKCkgPT09IHNhbmRib3hLZXkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICB8fCAoc21pLnVuaXF1ZUlkICYmIHNtaS51bmlxdWVJZCA9PT0gc2FuZGJveEtleSkpO1xuICAgICAgICAgICAgc2FuZGJveEtleSA9IHNhbmRib3hNZW51SXRlbS5rZXk7XG4gICAgICAgICAgICBpZiAoIXNhbmRib3hNZW51SXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHNhbmRib3hLZXk6IG51bGwsIHNjZW5hcmlvS2V5OiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzY2VuYXJpb0Rlc2MgPSB2YWx1ZS5zdWJzdHIobGFzdFNsYXNoICsgMSwgdmFsdWUubGVuZ3RoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3Qgc2NlbmFyaW9LZXkgPSBzYW5kYm94TWVudUl0ZW0uc2NlbmFyaW9NZW51SXRlbXNcbiAgICAgICAgICAgICAgICAuZmluZEluZGV4KHNjZW5hcmlvTWVudUl0ZW0gPT4gc2NlbmFyaW9NZW51SXRlbS5kZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpID09PSBzY2VuYXJpb0Rlc2MpICsgMTtcbiAgICAgICAgICAgIGlmIChzY2VuYXJpb0tleSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2FuZGJveEtleTogbnVsbCwgc2NlbmFyaW9LZXk6IG51bGwgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHsgc2FuZGJveEtleSwgc2NlbmFyaW9LZXkgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==