import { __decorate, __param } from "tslib";
import { Component, Inject, Input, NgModule, NgModuleRef, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, ÉµresetCompiledComponents as resetCompiledComponents } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { SandboxLoader } from '../shared/sandbox-loader';
import { BrowserModule } from '@angular/platform-browser';
import { MIDDLEWARE } from '../../lib/middlewares';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
let ScenarioComponent = class ScenarioComponent {
    constructor(zone, middleware) {
        this.zone = zone;
        this.middleware = middleware;
        /**
         * Collection of bootstrapped apps
         */
        this.activeApps = [];
        /**
         * Unsubscribe all subscriptions on component destroy
         */
        this.onDestroy = new Subject();
    }
    ngOnInit() {
        this.middleware
            .pipe(takeUntil(this.onDestroy))
            .subscribe(middlewares => this.activeMiddleware = middlewares);
    }
    ngOnChanges(changes) {
        if (changes.selectedSandboxAndScenarioKeys) {
            this.bootstrapSandbox(changes.selectedSandboxAndScenarioKeys.currentValue);
        }
    }
    ngOnDestroy() {
        this.onDestroy.next();
        // this cleans up the DOM when a sandboxed component is loaded and the search bar is then cleared
        if (this.activeApps.length > 0) {
            // destroy sandboxed app (doesn't remove it from the DOM though)
            const app = this.activeApps.pop();
            app.destroy();
            // remove the sandboxed component's element from the dom
            const hostElement = document.querySelector('playground-host');
            if (hostElement && hostElement.children) {
                hostElement.children[0].remove();
            }
        }
    }
    /**
     * Bootstrap a new Angular application with the sandbox's required dependencies
     */
    bootstrapSandbox(selectedSandboxAndScenarioKeys) {
        SandboxLoader.loadSandbox(selectedSandboxAndScenarioKeys.sandboxKey).then(sandbox => {
            if (sandbox) {
                const scenario = sandbox.scenarios
                    .find((s) => s.key === selectedSandboxAndScenarioKeys.scenarioKey);
                if (scenario) {
                    if (this.activeApps.length > 0) {
                        const app = this.activeApps.pop();
                        app.destroy();
                    }
                    // Don't bootstrap a new Angular application within an existing zone
                    this.zone.runOutsideAngular(() => {
                        const module = this.createModule(sandbox, scenario);
                        platformBrowserDynamic().bootstrapModule(module)
                            .then(app => {
                            this.activeApps.push(app);
                            resetCompiledComponents();
                            window.isPlaygroundComponentLoaded = () => true;
                        })
                            .catch(err => {
                            resetCompiledComponents();
                            window.isPlaygroundComponentLoadedWithErrors = () => true;
                            console.error(err);
                        });
                    });
                }
            }
        });
    }
    /**
     * Create a module containing the dependencies of a sandbox
     */
    createModule(sandboxMeta, scenario) {
        const hostComp = this.createComponent(scenario);
        class DynamicModule {
            ngDoBootstrap(app) {
                const hostEl = document.querySelector('playground-host');
                if (!hostEl) {
                    const compEl = document.createElement('playground-host');
                    document.body.appendChild(compEl);
                }
                app.bootstrap(hostComp);
            }
        }
        return NgModule({
            imports: [
                BrowserModule,
                ...sandboxMeta.imports,
                ...this.activeMiddleware.modules,
            ],
            declarations: [
                hostComp,
                sandboxMeta.declareComponent ? sandboxMeta.type : [],
                ...sandboxMeta.declarations,
            ],
            providers: [...sandboxMeta.providers],
            entryComponents: [hostComp, ...sandboxMeta.entryComponents],
            schemas: [...sandboxMeta.schemas],
        })(DynamicModule);
    }
    /**
     * Construct a component to serve as the host for the provided scenario
     */
    createComponent(scenario) {
        class DynamicComponent {
            constructor() {
                Object.assign(this, scenario.context);
            }
        }
        return Component({
            selector: 'playground-host',
            template: scenario.template,
            styles: scenario.styles,
            providers: scenario.providers,
        })(DynamicComponent);
    }
};
ScenarioComponent.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [MIDDLEWARE,] }] }
];
__decorate([
    Input()
], ScenarioComponent.prototype, "selectedSandboxAndScenarioKeys", void 0);
ScenarioComponent = __decorate([
    Component({
        selector: 'ap-scenario',
        template: `
        <ng-template></ng-template>`
    }),
    __param(1, Inject(MIDDLEWARE))
], ScenarioComponent);
export { ScenarioComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NlbmFyaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wbGF5Z3JvdW5kLyIsInNvdXJjZXMiOlsibGliL2NvcmUvc2NlbmFyaW8vc2NlbmFyaW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUNSLFdBQVcsRUFDWCxNQUFNLEVBQ04sU0FBUyxFQUNULFNBQVMsRUFDVCxNQUFNLEVBQ04sYUFBYSxFQUNiLHdCQUF3QixJQUFJLHVCQUF1QixFQUN0RCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU8vQixJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQXFCMUIsWUFBb0IsSUFBWSxFQUE4QixVQUFVO1FBQXBELFNBQUksR0FBSixJQUFJLENBQVE7UUFBOEIsZUFBVSxHQUFWLFVBQVUsQ0FBQTtRQWZ4RTs7V0FFRztRQUNLLGVBQVUsR0FBdUIsRUFBRSxDQUFDO1FBTzVDOztXQUVHO1FBQ0ssY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFHeEMsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsVUFBVTthQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQy9CLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxD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UztTQUNoQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0osQ0FBQTs7WUF0SDZCLE1BQU07NENBQUcsTUFBTSxTQUFDLFVBQVU7O0FBakIzQztJQUFSLEtBQUssRUFBRTt5RUFBZ0U7QUFKL0QsaUJBQWlCO0lBTDdCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCLFFBQVEsRUFBRTtvQ0FDc0I7S0FDbkMsQ0FBQztJQXNCcUMsV0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7R0FyQjVDLGlCQUFpQixDQTJJN0I7U0EzSVksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE5nTW9kdWxlLFxuICAgIE5nTW9kdWxlUmVmLFxuICAgIE5nWm9uZSxcbiAgICBPbkNoYW5nZXMsXG4gICAgT25EZXN0cm95LFxuICAgIE9uSW5pdCxcbiAgICBTaW1wbGVDaGFuZ2VzLFxuICAgIMm1cmVzZXRDb21waWxlZENvbXBvbmVudHMgYXMgcmVzZXRDb21waWxlZENvbXBvbmVudHNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcbmltcG9ydCB7IFNhbmRib3hMb2FkZXIgfSBmcm9tICcuLi9zaGFyZWQvc2FuZGJveC1sb2FkZXInO1xuaW1wb3J0IHsgU2NlbmFyaW8sIFNlbGVjdGVkU2FuZGJveEFuZFNjZW5hcmlvS2V5cywgU2FuZGJveCB9IGZyb20gJy4uLy4uL2xpYi9hcHAtc3RhdGUnO1xuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTWlkZGxld2FyZSwgTUlERExFV0FSRSB9IGZyb20gJy4uLy4uL2xpYi9taWRkbGV3YXJlcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYXAtc2NlbmFyaW8nLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxuZy10ZW1wbGF0ZT48L25nLXRlbXBsYXRlPmAsXG59KVxuZXhwb3J0IGNsYXNzIFNjZW5hcmlvQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdGVkIHNhbmRib3ggYW5kIHNjZW5hcmlvIHByb3ZpZGVkIGZyb20gdGhlIGFwcCBkcm9wZG93blxuICAgICAqL1xuICAgIEBJbnB1dCgpIHNlbGVjdGVkU2FuZGJveEFuZFNjZW5hcmlvS2V5czogU2VsZWN0ZWRTYW5kYm94QW5kU2NlbmFyaW9LZXlzO1xuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiBib290c3RyYXBwZWQgYXBwc1xuICAgICAqL1xuICAgIHByaXZhdGUgYWN0aXZlQXBwczogTmdNb2R1bGVSZWY8YW55PltdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBNb2R1bGVzIHRoYXQgYXJlIGFwcGxpZWQgYWNyb3NzIGV2ZXJ5IHNhbmRib3ggaW5zdGFuY2VcbiAgICAgKi9cbiAgICBwcml2YXRlIGFjdGl2ZU1pZGRsZXdhcmU6IE1pZGRsZXdhcmU7XG5cbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZSBhbGwgc3Vic2NyaXB0aW9ucyBvbiBjb21wb25lbnQgZGVzdHJveVxuICAgICAqL1xuICAgIHByaXZhdGUgb25EZXN0cm95ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgem9uZTogTmdab25lLCBASW5qZWN0KE1JRERMRVdBUkUpIHByaXZhdGUgbWlkZGxld2FyZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKG1pZGRsZXdhcmVzID0+IHRoaXMuYWN0aXZlTWlkZGxld2FyZSA9IG1pZGRsZXdhcmVzKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLnNlbGVjdGVkU2FuZGJveEFuZFNjZW5hcmlvS2V5cykge1xuICAgICAgICAgICAgdGhpcy5ib290c3RyYXBTYW5kYm94KGNoYW5nZXMuc2VsZWN0ZWRTYW5kYm94QW5kU2NlbmFyaW9LZXlzLmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kubmV4dCgpO1xuXG4gICAgICAgIC8vIHRoaXMgY2xlYW5zIHVwIHRoZSBET00gd2hlbiBhIHNhbmRib3hlZCBjb21wb25lbnQgaXMgbG9hZGVkIGFuZCB0aGUgc2VhcmNoIGJhciBpcyB0aGVuIGNsZWFyZWRcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlQXBwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBkZXN0cm95IHNhbmRib3hlZCBhcHAgKGRvZXNuJ3QgcmVtb3ZlIGl0IGZyb20gdGhlIERPTSB0aG91Z2gpXG4gICAgICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmFjdGl2ZUFwcHMucG9wKCk7XG4gICAgICAgICAgICBhcHAuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIHNhbmRib3hlZCBjb21wb25lbnQncyBlbGVtZW50IGZyb20gdGhlIGRvbVxuICAgICAgICAgICAgY29uc3QgaG9zdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdwbGF5Z3JvdW5kLWhvc3QnKTtcbiAgICAgICAgICAgIGlmIChob3N0RWxlbWVudCAmJiBob3N0RWxlbWVudC5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGhvc3RFbGVtZW50LmNoaWxkcmVuWzBdLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQm9vdHN0cmFwIGEgbmV3IEFuZ3VsYXIgYXBwbGljYXRpb24gd2l0aCB0aGUgc2FuZGJveCdzIHJlcXVpcmVkIGRlcGVuZGVuY2llc1xuICAgICAqL1xuICAgIHByaXZhdGUgYm9vdHN0cmFwU2FuZGJveChzZWxlY3RlZFNhbmRib3hBbmRTY2VuYXJpb0tleXM6IFNlbGVjdGVkU2FuZGJveEFuZFNjZW5hcmlvS2V5cykge1xuICAgICAgICBTYW5kYm94TG9hZGVyLmxvYWRTYW5kYm94KHNlbGVjdGVkU2FuZGJveEFuZFNjZW5hcmlvS2V5cy5zYW5kYm94S2V5KS50aGVuKHNhbmRib3ggPT4ge1xuICAgICAgICAgICAgaWYgKHNhbmRib3gpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2VuYXJpbyA9IHNhbmRib3guc2NlbmFyaW9zXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKChzOiBTY2VuYXJpbykgPT4gcy5rZXkgPT09IHNlbGVjdGVkU2FuZGJveEFuZFNjZW5hcmlvS2V5cy5zY2VuYXJpb0tleSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2NlbmFyaW8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQXBwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmFjdGl2ZUFwcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgYm9vdHN0cmFwIGEgbmV3IEFuZ3VsYXIgYXBwbGljYXRpb24gd2l0aGluIGFuIGV4aXN0aW5nIHpvbmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IHRoaXMuY3JlYXRlTW9kdWxlKHNhbmRib3gsIHNjZW5hcmlvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUobW9kdWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGFwcCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlQXBwcy5wdXNoKGFwcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q29tcGlsZWRDb21wb25lbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1BsYXlncm91bmRDb21wb25lbnRMb2FkZWQgPSAoKSA9PiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q29tcGlsZWRDb21wb25lbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1BsYXlncm91bmRDb21wb25lbnRMb2FkZWRXaXRoRXJyb3JzID0gKCkgPT4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG1vZHVsZSBjb250YWluaW5nIHRoZSBkZXBlbmRlbmNpZXMgb2YgYSBzYW5kYm94XG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVNb2R1bGUoc2FuZGJveE1ldGE6IFNhbmRib3gsIHNjZW5hcmlvKSB7XG4gICAgICAgIGNvbnN0IGhvc3RDb21wID0gdGhpcy5jcmVhdGVDb21wb25lbnQoc2NlbmFyaW8pO1xuXG4gICAgICAgIGNsYXNzIER5bmFtaWNNb2R1bGUge1xuICAgICAgICAgICAgbmdEb0Jvb3RzdHJhcChhcHApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdwbGF5Z3JvdW5kLWhvc3QnKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhvc3RFbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwbGF5Z3JvdW5kLWhvc3QnKTtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb21wRWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcHAuYm9vdHN0cmFwKGhvc3RDb21wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBOZ01vZHVsZSh7XG4gICAgICAgICAgICBpbXBvcnRzOiBbXG4gICAgICAgICAgICAgICAgQnJvd3Nlck1vZHVsZSxcbiAgICAgICAgICAgICAgICAuLi5zYW5kYm94TWV0YS5pbXBvcnRzLFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuYWN0aXZlTWlkZGxld2FyZS5tb2R1bGVzLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICAgICAgICAgIGhvc3RDb21wLFxuICAgICAgICAgICAgICAgIHNhbmRib3hNZXRhLmRlY2xhcmVDb21wb25lbnQgPyBzYW5kYm94TWV0YS50eXBlIDogW10sXG4gICAgICAgICAgICAgICAgLi4uc2FuZGJveE1ldGEuZGVjbGFyYXRpb25zLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogWy4uLnNhbmRib3hNZXRhLnByb3ZpZGVyc10sXG4gICAgICAgICAgICBlbnRyeUNvbXBvbmVudHM6IFtob3N0Q29tcCwgLi4uc2FuZGJveE1ldGEuZW50cnlDb21wb25lbnRzXSxcbiAgICAgICAgICAgIHNjaGVtYXM6IFsuLi5zYW5kYm94TWV0YS5zY2hlbWFzXSxcbiAgICAgICAgfSkoRHluYW1pY01vZHVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgY29tcG9uZW50IHRvIHNlcnZlIGFzIHRoZSBob3N0IGZvciB0aGUgcHJvdmlkZWQgc2NlbmFyaW9cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUNvbXBvbmVudChzY2VuYXJpbzogU2NlbmFyaW8pIHtcbiAgICAgICAgY2xhc3MgRHluYW1pY0NvbXBvbmVudCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHNjZW5hcmlvLmNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIENvbXBvbmVudCh7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ3BsYXlncm91bmQtaG9zdCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogc2NlbmFyaW8udGVtcGxhdGUsXG4gICAgICAgICAgICBzdHlsZXM6IHNjZW5hcmlvLnN0eWxlcyxcbiAgICAgICAgICAgIHByb3ZpZGVyczogc2NlbmFyaW8ucHJvdmlkZXJzLFxuICAgICAgICB9KShEeW5hbWljQ29tcG9uZW50KTtcbiAgICB9XG59XG4iXX0=