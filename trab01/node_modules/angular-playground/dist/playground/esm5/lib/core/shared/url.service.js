import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Location } from '@angular/common';
import { SandboxLoader } from './sandbox-loader';
var UrlService = /** @class */ (function () {
    function UrlService(location) {
        this.location = location;
        this._embed = null;
        this._select = null;
        this.sandboxMenuItems = SandboxLoader.getSandboxMenuItems();
        var urlPath = location.path();
        this._embed = /[?|&]embed=1/.exec(urlPath) !== null;
        this._select = this.parse('scenario', this.sandboxMenuItems, urlPath);
        if (this._select) {
            if (this._select.sandboxKey === null && this._select.scenarioKey === null) {
                this.location.replaceState('');
                return;
            }
        }
    }
    Object.defineProperty(UrlService.prototype, "embed", {
        get: function () {
            return this._embed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UrlService.prototype, "select", {
        get: function () {
            return this._select;
        },
        enumerable: true,
        configurable: true
    });
    UrlService.prototype.setSelected = function (sandboxKey, scenarioKey) {
        if (sandboxKey === null && scenarioKey === null) {
            this.location.replaceState('');
            return;
        }
        var sandBoxMenuItem = this.sandboxMenuItems
            .find(function (sandboxMenuItem) { return sandboxMenuItem.key.toLowerCase() === sandboxKey.toLowerCase(); });
        var scenarioMenuItem = sandBoxMenuItem.scenarioMenuItems.find(function (mi) { return mi.key === scenarioKey; });
        var key = sandBoxMenuItem.uniqueId ? sandBoxMenuItem.uniqueId : sandboxKey;
        this.location.replaceState("?scenario=" + encodeURIComponent(key) + "/" + encodeURIComponent(scenarioMenuItem.description));
    };
    UrlService.prototype.parse = function (key, sandboxMenuItems, urlPath) {
        var match = new RegExp('[?|&]' + key + '=([^&#]*)').exec(urlPath);
        if (match !== null) {
            var value = decodeURIComponent(match[1]);
            var lastSlash = value.lastIndexOf('/');
            var sbKey = value.substr(0, lastSlash);
            var sandboxKey_1 = sbKey;
            var sandboxMenuItem = sandboxMenuItems
                .find(function (smi) { return smi.key.toLowerCase() === sandboxKey_1.toLowerCase()
                || (smi.uniqueId && smi.uniqueId === sandboxKey_1); });
            sandboxKey_1 = sandboxMenuItem.key;
            if (!sandboxMenuItem) {
                return { sandboxKey: null, scenarioKey: null };
            }
            var scenarioDesc_1 = value.substr(lastSlash + 1, value.length).toLowerCase();
            var scenarioKey = sandboxMenuItem.scenarioMenuItems
                .findIndex(function (scenarioMenuItem) { return scenarioMenuItem.description.toLowerCase() === scenarioDesc_1; }) + 1;
            if (scenarioKey <= 0) {
                return { sandboxKey: null, scenarioKey: null };
            }
            return { sandboxKey: sandboxKey_1, scenarioKey: scenarioKey };
        }
    };
    UrlService.ctorParameters = function () { return [
        { type: Location }
    ]; };
    UrlService = __decorate([
        Injectable()
    ], UrlService);
    return UrlService;
}());
export { UrlService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXBsYXlncm91bmQvIiwic291cmNlcyI6WyJsaWIvY29yZS9zaGFyZWQvdXJsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRDtJQWNJLG9CQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBYjlCLFdBQU0sR0FBWSxJQUFJLENBQUM7UUFDdkIsWUFBTyxHQUFRLElBQUksQ0FBQztRQWF4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDNUQsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUM7UUFDcEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEtBQUssSUFBSSxFQUFFO2dCQUN2RSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDL0IsT0FBTzthQUNWO1NBQ0o7SUFDTCxDQUFDO0lBbkJELHNCQUFJLDZCQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFD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RDtZQUVELE9BQU8sRUFBRSxVQUFVLGNBQUEsRUFBRSxXQUFXLGFBQUEsRUFBRSxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQzs7Z0JBakQ2QixRQUFROztJQWQ3QixVQUFVO1FBRHRCLFVBQVUsRUFBRTtPQUNBLFVBQVUsQ0FnRXRCO0lBQUQsaUJBQUM7Q0FBQSxBQWhFRCxJQWdFQztTQWhFWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgU2FuZGJveE1lbnVJdGVtIH0gZnJvbSAnLi4vLi4vbGliL2FwcC1zdGF0ZSc7XG5pbXBvcnQgeyBTYW5kYm94TG9hZGVyIH0gZnJvbSAnLi9zYW5kYm94LWxvYWRlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVcmxTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9lbWJlZDogYm9vbGVhbiA9IG51bGw7XG4gICAgcHJpdmF0ZSBfc2VsZWN0OiBhbnkgPSBudWxsO1xuXG4gICAgc2FuZGJveE1lbnVJdGVtczogU2FuZGJveE1lbnVJdGVtW107XG5cbiAgICBnZXQgZW1iZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbWJlZDtcbiAgICB9XG5cbiAgICBnZXQgc2VsZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0O1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuc2FuZGJveE1lbnVJdGVtcyA9IFNhbmRib3hMb2FkZXIuZ2V0U2FuZGJveE1lbnVJdGVtcygpO1xuICAgICAgICBjb25zdCB1cmxQYXRoID0gbG9jYXRpb24ucGF0aCgpO1xuICAgICAgICB0aGlzLl9lbWJlZCA9IC9bP3wmXWVtYmVkPTEvLmV4ZWModXJsUGF0aCkgIT09IG51bGw7XG4gICAgICAgIHRoaXMuX3NlbGVjdCA9IHRoaXMucGFyc2UoJ3NjZW5hcmlvJywgdGhpcy5zYW5kYm94TWVudUl0ZW1zLCB1cmxQYXRoKTtcbiAgICAgICAgaWYgKHRoaXMuX3NlbGVjdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NlbGVjdC5zYW5kYm94S2V5ID09PSBudWxsICYmIHRoaXMuX3NlbGVjdC5zY2VuYXJpb0tleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYXRpb24ucmVwbGFjZVN0YXRlKCcnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTZWxlY3RlZChzYW5kYm94S2V5OiBzdHJpbmcsIHNjZW5hcmlvS2V5OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHNhbmRib3hLZXkgPT09IG51bGwgJiYgc2NlbmFyaW9LZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb24ucmVwbGFjZVN0YXRlKCcnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzYW5kQm94TWVudUl0ZW0gPSB0aGlzLnNhbmRib3hNZW51SXRlbXNcbiAgICAgICAgICAgIC5maW5kKHNhbmRib3hNZW51SXRlbSA9PiBzYW5kYm94TWVudUl0ZW0ua2V5LnRvTG93ZXJDYXNlKCkgPT09IHNhbmRib3hLZXkudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGNvbnN0IHNjZW5hcmlvTWVudUl0ZW0gPSBzYW5kQm94TWVudUl0ZW0uc2NlbmFyaW9NZW51SXRlbXMuZmluZChtaSA9PiBtaS5rZXkgPT09IHNjZW5hcmlvS2V5KTtcbiAgICAgICAgY29uc3Qga2V5ID0gc2FuZEJveE1lbnVJdGVtLnVuaXF1ZUlkID8gc2FuZEJveE1lbnVJdGVtLnVuaXF1ZUlkIDogc2FuZGJveEtleTtcbiAgICAgICAgdGhpcy5sb2NhdGlvbi5yZXBsYWNlU3RhdGUoYD9zY2VuYXJpbz0ke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfS8ke2VuY29kZVVSSUNvbXBvbmVudChzY2VuYXJpb01lbnVJdGVtLmRlc2NyaXB0aW9uKX1gKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhcnNlKGtleTogc3RyaW5nLCBzYW5kYm94TWVudUl0ZW1zOiBTYW5kYm94TWVudUl0ZW1bXSwgdXJsUGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbmV3IFJlZ0V4cCgnWz98Jl0nICsga2V5ICsgJz0oW14mI10qKScpLmV4ZWModXJsUGF0aCk7XG4gICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pO1xuICAgICAgICAgICAgY29uc3QgbGFzdFNsYXNoID0gdmFsdWUubGFzdEluZGV4T2YoJy8nKTtcblxuICAgICAgICAgICAgY29uc3Qgc2JLZXkgPSB2YWx1ZS5zdWJzdHIoMCwgbGFzdFNsYXNoKTtcbiAgICAgICAgICAgIGxldCBzYW5kYm94S2V5ID0gc2JLZXk7XG4gICAgICAgICAgICBjb25zdCBzYW5kYm94TWVudUl0ZW0gPSBzYW5kYm94TWVudUl0ZW1zXG4gICAgICAgICAgICAgICAgLmZpbmQoc21pID0+IHNtaS5rZXkudG9Mb3dlckNhc2UoKSA9PT0gc2FuZGJveEtleS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgIHx8IChzbWkudW5pcXVlSWQgJiYgc21pLnVuaXF1ZUlkID09PSBzYW5kYm94S2V5KSk7XG4gICAgICAgICAgICBzYW5kYm94S2V5ID0gc2FuZGJveE1lbnVJdGVtLmtleTtcbiAgICAgICAgICAgIGlmICghc2FuZGJveE1lbnVJdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2FuZGJveEtleTogbnVsbCwgc2NlbmFyaW9LZXk6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNjZW5hcmlvRGVzYyA9IHZhbHVlLnN1YnN0cihsYXN0U2xhc2ggKyAxLCB2YWx1ZS5sZW5ndGgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBzY2VuYXJpb0tleSA9IHNhbmRib3hNZW51SXRlbS5zY2VuYXJpb01lbnVJdGVtc1xuICAgICAgICAgICAgICAgIC5maW5kSW5kZXgoc2NlbmFyaW9NZW51SXRlbSA9PiBzY2VuYXJpb01lbnVJdGVtLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCkgPT09IHNjZW5hcmlvRGVzYykgKyAxO1xuICAgICAgICAgICAgaWYgKHNjZW5hcmlvS2V5IDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzYW5kYm94S2V5OiBudWxsLCBzY2VuYXJpb0tleTogbnVsbCB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geyBzYW5kYm94S2V5LCBzY2VuYXJpb0tleSB9O1xuICAgICAgICB9XG4gICAgfVxufVxuIl19