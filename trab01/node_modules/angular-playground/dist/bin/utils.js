"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function delay(ms) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
}
exports.delay = delay;
/**
 * Creates a Chromium page and navigates to the host url.
 * If Chromium is not able to connect to the provided page, it will issue a series
 * of retries before it finally fails.
 */
function waitForNgServe(browser, hostUrl, timeoutAttempts) {
    return __awaiter(this, void 0, void 0, function* () {
        if (timeoutAttempts === 0) {
            yield browser.close();
            throw new Error('Unable to connect to Playground.');
        }
        const page = yield browser.newPage();
        let ngServeErrors = 0;
        try {
            page.on('console', (msg) => {
                if (msg.type() === 'error') {
                    ngServeErrors++;
                }
            });
            yield page.goto(hostUrl);
            setTimeout(() => page.close()); // close page to prevent memory leak
        }
        catch (e) {
            yield page.close();
            yield delay(1000);
            yield waitForNgServe(browser, hostUrl, timeoutAttempts - 1);
        }
        if (ngServeErrors > 0) {
            throw new Error('ng serve failure');
        }
    });
}
exports.waitForNgServe = waitForNgServe;
