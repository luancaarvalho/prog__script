"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const puppeteer_1 = require("puppeteer");
const path_1 = require("path");
const util_1 = require("util");
const child_process_1 = require("child_process");
const core_1 = require("@jest/core");
const build_sandboxes_1 = require("./build-sandboxes");
const utils_1 = require("./utils");
// Used to tailor the version of headless chromium ran by puppeteer
const CHROME_ARGS = ['--disable-gpu', '--no-sandbox'];
const TEST_PATH_BASE = path_1.resolve(__dirname, '../../dist/jest/test.js');
let browser;
// Ensure Chromium instances are destroyed on error
process.on('unhandledRejection', () => __awaiter(void 0, void 0, void 0, function* () {
    if (browser) {
        yield browser.close();
    }
}));
function checkSnapshots(config) {
    return __awaiter(this, void 0, void 0, function* () {
        if (config.deleteSnapshots) {
            deleteSnapshots(config);
        }
        else {
            const hostUrl = `http://${config.angularCliHost}:${config.angularCliPort}`;
            let overallExitCode = 0;
            if (config.viewportSizes.length > 0) {
                for (const viewportConfig of config.viewportSizes) {
                    const testPath = getTestPath(`-${formatViewportSize(viewportConfig)}`);
                    const exitCode = yield main(config, hostUrl, testPath, viewportConfig);
                    if (exitCode !== 0) {
                        overallExitCode = exitCode;
                    }
                }
            }
            else {
                const testPath = getTestPath();
                overallExitCode = yield main(config, hostUrl, testPath);
            }
            process.exit(overallExitCode);
        }
    });
}
exports.checkSnapshots = checkSnapshots;
/////////////////////////////////
function main(config, hostUrl, testPath, viewportConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        // create test file to run with jest
        writeSandboxesToTestFile(config, hostUrl, testPath, viewportConfig);
        // launch puppeteer headless browser to render scenarios
        browser = yield puppeteer_1.launch({
            headless: true,
            handleSIGINT: false,
            args: CHROME_ARGS,
        });
        const timeoutAttempts = config.timeout;
        yield utils_1.waitForNgServe(browser, hostUrl, timeoutAttempts);
        const execAsync = util_1.promisify(child_process_1.exec);
        yield execAsync('cd node_modules/angular-playground');
        const testRegex = viewportConfig
            ? `test-${formatViewportSize(viewportConfig)}\\.js$`
            : 'test\\.js';
        const argv = {
            config: 'node_modules/angular-playground/dist/jest/jest-puppeteer.config.js',
            updateSnapshot: !!config.updateSnapshots,
            testRegex,
        };
        const projectPath = path_1.resolve('.');
        const projects = [projectPath];
        const { results } = yield core_1.runCLI(argv, projects);
        yield browser.close();
        const exitCode = results.numFailedTests === 0 ? 0 : 1;
        return exitCode;
    });
}
function normalizeResolvePath(directory) {
    const absolutePath = path_1.isAbsolute(directory) ? directory : path_1.resolve('.', directory);
    return absolutePath.replace(/\\/g, '/');
}
function deleteSnapshots(config) {
    try {
        const absoluteSnapshotDirectory = normalizeResolvePath(config.snapshotDirectory);
        const items = require(build_sandboxes_1.SANDBOX_MENU_ITEMS_FILE).getSandboxMenuItems();
        const buildIdentifier = (url) => {
            return decodeURIComponent(url)
                .substr(2)
                .replace(/[\/.]|\s+/g, '-')
                .replace(/[^a-z0-9\-]/gi, '');
        };
        let filesDeleted = false;
        items.forEach((item) => {
            item.scenarioMenuItems.forEach((scenarioItem) => {
                if (!config.pathToSandboxes || config.pathToSandboxes.some(vp => item.key.includes(vp))) {
                    const url = `${encodeURIComponent(item.key)}/${encodeURIComponent(scenarioItem.description)}`;
                    const filePath = `${absoluteSnapshotDirectory}/${buildIdentifier(url)}-snap.png`;
                    if (fs_1.existsSync(filePath)) {
                        fs_1.unlinkSync(filePath);
                        console.log(`Deleted file: ${filePath}`);
                        filesDeleted = true;
                    }
                }
            });
        });
        if (!filesDeleted) {
            console.log('No snapshots were deleted.');
        }
    }
    catch (err) {
        throw new Error(`Failed to delete snapshots. ${err}`);
    }
}
function writeSandboxesToTestFile(config, hostUrl, testPath, viewportConfig) {
    const absoluteSnapshotDirectory = normalizeResolvePath(config.snapshotDirectory);
    const absoluteDiffDirectory = normalizeResolvePath(config.diffDirectory);
    try {
        const items = require(build_sandboxes_1.SANDBOX_MENU_ITEMS_FILE).getSandboxMenuItems();
        const testPaths = [];
        items.forEach((item) => {
            item.scenarioMenuItems.forEach((scenarioItem) => {
                if (!config.pathToSandboxes || config.pathToSandboxes.some(vp => item.key.includes(vp))) {
                    testPaths.push({
                        sandboxKey: item.key,
                        scenarioKey: scenarioItem.key,
                        url: `${encodeURIComponent(item.key)}/${encodeURIComponent(scenarioItem.description)}`,
                        label: `${item.name} [${scenarioItem.description}]`,
                    });
                }
            });
        }, []);
        const extraConfig = Object.keys(config.imageSnapshotConfig)
            .map(key => `${key}: ${JSON.stringify(config.imageSnapshotConfig[key])}`)
            .join(',');
        const result = `
          // imports
          const chalk = require('chalk');
          // declarations
          const tests = ${JSON.stringify(testPaths)};
          const buildIdentifier = (url) => {
            return decodeURIComponent(url + '-' + ${JSON.stringify(formatViewportSize(viewportConfig))})
              .substr(2)
              .replace(/[\\/\\.]|\\s+/g, '-')
              .replace(/[^a-z0-9\\-]/gi, '');
          };
          const excluded = ${JSON.stringify(config.visualRegressionIgnore)}.map(item => new RegExp(item.regex, item.flags));
          // checks if sandbox identifier matches an excluded regex
          const checkIfExcluded = (url) => {
            for (const excludedRegex of excluded) {
              if (excludedRegex.test(url)) {
                return true;
              }
            }
            return false;
          }
          // set up tests
          beforeAll(async () => {
            ${viewportConfig ? `await page.setViewport(${JSON.stringify(viewportConfig)})` : ''}
            await page.goto('${hostUrl}');
            // mock current time
            await page.addScriptTag({ path: './node_modules/mockdate/src/mockdate.js' });
            await page.addScriptTag({ content: 'MockDate.set(${config.visualRegressionMockDate}, 0);' });
          });
          // run tests
          describe('Playground snapshot tests${viewportConfig ? ` [${formatViewportSize(viewportConfig)}]` : ''}', () => {
            for (let i = 0; i < tests.length; i++) {
              const test = tests[i];

              it(\`should match \${test.label}\`, async () => {
                if (!checkIfExcluded(buildIdentifier(test.url))) {
                  const url = \`${hostUrl}?scenario=\${test.url}\`;
                  console.log(\`Checking [\${i + 1}/\${tests.length}]: \${url}\`);

                  // load scenario
                  await page.evaluate((sandboxKey, scenarioKey) => window.loadScenario(sandboxKey, scenarioKey),
                    test.sandboxKey, test.scenarioKey)
                  await page.waitFor(() => window.isPlaygroundComponentLoaded() || window.isPlaygroundComponentLoadedWithErrors());
                  const sleep = (ms) => new Promise(res => setTimeout(res, ms));
                  await sleep(${config.visualRegressionSleepDuration}); // sleep for a bit in case page elements are still being rendered

                  // take screenshot
                  const image = await page.screenshot({ fullPage: ${!viewportConfig} });

                  // check for diffs
                  expect(image).toMatchImageSnapshot({
                    customSnapshotsDir: '${absoluteSnapshotDirectory}',
                    customDiffDir: '${absoluteDiffDirectory}',
                    customSnapshotIdentifier: () => buildIdentifier(test.url),
                    ${extraConfig}
                  });
                } else {
                  console.log(chalk.red(\`SKIPPED [\${i + 1}/\${tests.length}]: \${buildIdentifier(test.url)}\`));
                }
              }, 30000);
            }
          });
        `;
        clearOldTestFiles();
        fs_1.writeFileSync(testPath, result, { encoding: 'utf-8' });
    }
    catch (err) {
        throw new Error(`Failed to create snapshot test file. ${err}`);
    }
}
const clearOldTestFiles = () => {
    try {
        const folderPath = getTestPath().replace('test.js', '');
        const oldTestFiles = fs_1.readdirSync(folderPath)
            .filter(name => /test(-\d+x\d+)\.js$/.test(name));
        for (const name of oldTestFiles) {
            fs_1.unlinkSync(`${folderPath}${name}`);
        }
    }
    catch (err) {
        throw new Error(`Couldn't delete previous test files.`);
    }
};
const getTestPath = (suffix = '') => TEST_PATH_BASE.replace('test.js', `test${suffix}.js`);
const formatViewportSize = (viewportConfig) => viewportConfig ? `${viewportConfig.width}x${viewportConfig.height}` : '';
