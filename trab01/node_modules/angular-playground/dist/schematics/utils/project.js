"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const config_1 = require("@schematics/angular/utility/config");
function getProjectPath(host, options) {
    const project = getProject(host, options);
    if (project.root.substr(-1) === '/') {
        project.root = project.root.substr(0, project.root.length - 1);
    }
    if (options.path === undefined) {
        const projectDirName = project.projectType === 'application'
            ? 'app'
            : 'lib';
        const sourceRoot = exports.getSourceRoot(project.sourceRoot);
        return `${project.root ? `/${project.root}` : ''}/${sourceRoot}/${projectDirName}`;
    }
    return options.path;
}
exports.getProjectPath = getProjectPath;
function getProject(host, options, typeFilter = null) {
    const workspace = config_1.getWorkspace(host);
    if (!options.project) {
        const projectNames = Object.keys(workspace.projects);
        // can have no projects if created with `ng new <name> --createApplication=false`
        if (projectNames.length === 0) {
            throw new Error('Your app must have at least 1 project to use Playground.');
        }
        // if type filter is not set, use first project
        let firstFilteredProject = projectNames[0];
        if (typeFilter) {
            // apply filter
            for (const projectName in workspace.projects) {
                if (workspace.projects[projectName].projectType === typeFilter) {
                    firstFilteredProject = projectName;
                    break;
                }
            }
        }
        options.project = firstFilteredProject;
    }
    return workspace.projects[options.project];
}
exports.getProject = getProject;
exports.getSourceRoot = (sourceRoot) => sourceRoot === undefined ? 'src' : core_1.normalize(sourceRoot);
//# sourceMappingURL=project.js.map